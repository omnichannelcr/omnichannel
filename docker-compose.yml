services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: omnichannel-database
    environment:
      POSTGRES_DB: omnichannel
      POSTGRES_USER: omnichannel_user
      POSTGRES_PASSWORD: omnichannel_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./packages/backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - omnichannel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnichannel_user -d omnichannel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: omnichannel-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
      - DATABASE_URL=postgresql://omnichannel_user:omnichannel_password@database:5432/omnichannel
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=omnichannel
      - DB_USER=omnichannel_user
      - DB_PASSWORD=omnichannel_password
    env_file:
      - ./packages/backend/.env
    volumes:
      - ./packages/backend/logs:/app/logs
    networks:
      - omnichannel-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Service
  web:
    build:
      context: ./packages/web
      dockerfile: Dockerfile
    container_name: omnichannel-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - omnichannel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  omnichannel-network:
    driver: bridge

volumes:
  backend-logs:
    driver: local
